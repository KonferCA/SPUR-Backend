name: Run Tests
on:
  pull_request:
    branches: ["main"]
jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_PORT: 5432
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true
      - name: Install dependencies
        run: go mod download
      - name: Install Goose
        run: go install github.com/pressly/goose/v3/cmd/goose@v3.22.1
      - name: Run migrations
        run: goose -dir .sqlc/migrations postgres "postgres://postgres:postgres@localhost:5432/postgres?sslmode=disable" up
      - name: Run tests
        id: tests
        continue-on-error: true  # allows the workflow to continue even if tests fail
        run: |
          # run tests and tee output to both console and file
          go test -v ./... 2>&1 | tee test_output.txt
          echo "status=${?}" >> $GITHUB_OUTPUT  # save exit code
      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html
      - name: Upload coverage report
        if: ${{ !env.ACT && github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html
      - name: Comment PR
        if: ${{ !env.ACT && github.event_name == 'pull_request' && always() }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const coverageCmd = require('child_process').execSync('go tool cover -func=coverage.out | grep total:').toString();
            const coverage = coverageCmd.split('\t').pop().trim();
            
            const testStatus = '${{ steps.tests.outputs.status }}' === '0' ? 'success' : 'failure';
            const color = testStatus === 'success' ? '✅' : '❌';
            
            let failureDetails = '';
            if (testStatus !== 'success') {
              const testOutput = fs.readFileSync('test_output.txt', 'utf8');
              const failureMatches = testOutput.match(/--- FAIL:.*?(?=---|\z)/gs) || [];
              
              failureDetails = `
              <details>
              <summary>❌ Test Failures</summary>
              
              \`\`\`
              ${failureMatches.join('\n')}
              \`\`\`
              </details>
              `;
            }

            const output = `### Test Results ${color}
            
            **Status**: ${testStatus}
            **Coverage**: ${coverage}
            **OS**: \`${{ runner.os }}\`
            
            ${failureDetails}
            
            <details>
            <summary>Test Details</summary>
            
            * Triggered by: @${{ github.actor }}
            * Commit: ${{ github.sha }}
            * Branch: ${{ github.ref }}
            * Workflow: ${{ github.workflow }}
            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
