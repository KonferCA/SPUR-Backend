name: Deploy Preview
on:
    push:
        branches:
            - 'main'
jobs:
    deploy:
        runs-on: ubuntu-latest
        steps:
            - name: Deploy to Preview Server
              uses: appleboy/ssh-action@v1.0.3
              env:
                  MICONFIG: ${{ secrets.MICONFIG_PREVIEW }}
                  PK: ${{ secrets.BENTO_PK_PREVIEW }}
              with:
                  host: ${{ secrets.PREVIEW_SERVER_IP }}
                  username: ${{ secrets.PREVIEW_USER }}
                  key: ${{ secrets.PREVIEW_SERVER_SSH_KEY }}
                  envs: MICONFIG,PK
                  script: |
                      echo "Deploying new preview"

                      echo "Get .env from Konbini"
                      echo "$MICONFIG" > .miconfig.yaml
                      echo "$PK" > private.pem
                      mi bento order

                      # auto export all variables
                      set -a
                      source .env
                      # reset
                      set +a

                      echo "Setting up preview PostgreSQL container"
                      POSTGRES_DATA_DIR="$HOME/postgres"
                      mkdir -p $POSTGRES_DATA_DIR

                      # check if PostgreSQL container is running
                      POSTGRES_CONTAINER="$APP_NAME-postgres"
                      if ! docker ps | grep $POSTGRES_CONTAINER then
                        echo "PostgreSQL container not found. Starting new container..."
                        docker run -d \
                          --name $POSTGRES_CONTAINER \
                          -v $POSTGRES_DATA_DIR:/var/lib/postgresql/data \
                          -p $DB_PORT:5432
                          --env-file .env \ 
                          postgres:16
                        
                        # Wait for PostgreSQL to be ready
                        echo "Waiting for PostgreSQL to be ready..."
                        timeout 90s bash -c "until docker exec $POSTGRES_CONAINER pg_isready ; do sleep 5 ; done" && echo "Postgres is ready!"
                      else
                        echo "PostgreSQL container is already running"
                      fi

                      # clone repository
                      echo "Cloning repository"
                      rm -rf repo
                      git clone git@github.com:${{ github.repository }}.git repo
                      cd repo

                      echo "Run migrations"
                      goose -dir .sqlc/migrations postgres "postgres://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME?sslmode=$DB_SSLMODE" up

                      # build and run application container
                      echo "Building application Docker image..."
                      docker build -t $APP_NAME:latest .

                      # stop and remove existing container if it exists
                      echo "Stopping and removing existing container if present..."
                      docker stop $APP_NAME || true
                      docker rm $APP_NAME || true

                      # run new container
                      echo "Starting new application container..."
                      docker run -d \
                        --name $APP_NAME \
                        -p "$PORT:$PORT" \
                        --env-file ../.env
                        $APP_NAME:latest

                      # cleanup
                      echo "Performing cleanup..."
                      cd ..
                      echo "Remove repo"
                      rm -rf repo
                      echo "Remove .miconfig.yaml"
                      rm .miconfig.yaml
                      echo "Remove private.pem"
                      rm private.pem
                      echo "Remove .env"
                      rm .env
                      echo "Docker cleanup"
                      docker system prune -f
                      echo "Done"
