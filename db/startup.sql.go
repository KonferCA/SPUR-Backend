// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: startup.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStartup = `-- name: CreateStartup :one
INSERT INTO startups (
    owner_id,
    name,
    status,
    created_at
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, owner_id, name, status, created_at
`

type CreateStartupParams struct {
	OwnerID   int32
	Name      string
	Status    string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateStartup(ctx context.Context, arg CreateStartupParams) (Startup, error) {
	row := q.db.QueryRow(ctx, createStartup,
		arg.OwnerID,
		arg.Name,
		arg.Status,
		arg.CreatedAt,
	)
	var i Startup
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getStartups = `-- name: GetStartups :many
SELECT id, owner_id, name, status, created_at FROM startups
ORDER BY created_at DESC
`

func (q *Queries) GetStartups(ctx context.Context) ([]Startup, error) {
	rows, err := q.db.Query(ctx, getStartups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Startup
	for rows.Next() {
		var i Startup
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Name,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
